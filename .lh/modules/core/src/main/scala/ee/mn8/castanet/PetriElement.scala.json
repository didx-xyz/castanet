{
    "sourceFile": "modules/core/src/main/scala/ee/mn8/castanet/PetriElement.scala",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 70,
            "patches": [
                {
                    "date": 1629463928427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1629463950221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n package ee.mn8.castanet\n \n+import cats.kernel.Monoid\n+\n sealed trait PetriElement \n sealed trait ConcatenableProcess extends PetriElement with Monoid[PetriElement]\n \n type NodeId = Int\n"
                },
                {
                    "date": 1629464016923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n package ee.mn8.castanet\n \n import cats.kernel.Monoid\n+import scala.collection.immutable.SortedMap\n \n+\n sealed trait PetriElement \n sealed trait ConcatenableProcess extends PetriElement with Monoid[PetriElement]\n \n type NodeId = Int\n"
                },
                {
                    "date": 1629464028165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n package ee.mn8.castanet\n \n import cats.kernel.Monoid\n import scala.collection.immutable.SortedMap\n+import scala.collection.immutable.ListSet\n \n \n sealed trait PetriElement \n sealed trait ConcatenableProcess extends PetriElement with Monoid[PetriElement]\n"
                },
                {
                    "date": 1629464118583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import scala.collection.immutable.SortedMap\n import scala.collection.immutable.ListSet\n \n \n-sealed trait PetriElement \n+ trait PetriElement \n sealed trait ConcatenableProcess extends PetriElement with Monoid[PetriElement]\n \n type NodeId = Int\n \n"
                },
                {
                    "date": 1629464125103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n import scala.collection.immutable.SortedMap\n import scala.collection.immutable.ListSet\n \n \n- trait PetriElement \n-sealed trait ConcatenableProcess extends PetriElement with Monoid[PetriElement]\n+trait PetriElement \n+trait ConcatenableProcess extends PetriElement with Monoid[PetriElement]\n \n type NodeId = Int\n \n enum Arc extends PetriElement : \n"
                },
                {
                    "date": 1629464162892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import scala.collection.immutable.ListSet\n \n \n trait PetriElement \n+\n trait ConcatenableProcess extends PetriElement with Monoid[PetriElement]\n \n type NodeId = Int\n \n"
                },
                {
                    "date": 1629464184402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n import cats.kernel.Monoid\n import scala.collection.immutable.SortedMap\n import scala.collection.immutable.ListSet\n \n-\n trait PetriElement \n \n trait ConcatenableProcess extends PetriElement with Monoid[PetriElement]\n \n"
                },
                {
                    "date": 1629464304552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n \n trait  LinkableElement extends PetriElement: \n   val id: NodeId\n   val name: String\n+  \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n     def run() = ???\n \n"
                },
                {
                    "date": 1629464312194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,11 @@\n \n trait  LinkableElement extends PetriElement: \n   val id: NodeId\n   val name: String\n-  \n+\n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n+\n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n     def run() = ???\n \n case class PetriElements(l: List[LinkableElement] = List[LinkableElement]()) \n"
                },
                {
                    "date": 1629467660156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,14 @@\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n+  val managedChannelStream: Stream[IO, ManagedChannel] =\n+    ManagedChannelBuilder\n+      .forAddress(\"127.0.0.1\", 9999)\n+      .usePlaintext()\n+      .intercept(KeycloakInterceptor(\"hi\"))\n+      .stream[IO]\n     def run() = ???\n \n case class PetriElements(l: List[LinkableElement] = List[LinkableElement]()) \n \n"
                },
                {
                    "date": 1629467686336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \n import cats.kernel.Monoid\n import scala.collection.immutable.SortedMap\n import scala.collection.immutable.ListSet\n+import io.grpc.ManagedChannelBuilder\n \n trait PetriElement \n \n trait ConcatenableProcess extends PetriElement with Monoid[PetriElement]\n"
                },
                {
                    "date": 1629467735846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,10 @@\n import scala.collection.immutable.SortedMap\n import scala.collection.immutable.ListSet\n import io.grpc.ManagedChannelBuilder\n \n+\n+\n trait PetriElement \n \n trait ConcatenableProcess extends PetriElement with Monoid[PetriElement]\n \n"
                },
                {
                    "date": 1629467746892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,22 @@\n import scala.collection.immutable.SortedMap\n import scala.collection.immutable.ListSet\n import io.grpc.ManagedChannelBuilder\n \n+import cats.effect.*\n+import cats.effect.std.Dispatcher\n+import fs2.*\n+import _root_.io.grpc.*\n+import fs2.grpc.syntax.all.*\n+import java.util.concurrent.Executor\n+import Constants.*\n \n+import scala.concurrent.ExecutionContext.Implicits.global\n+import fs2.grpc.client.ClientOptions\n+import _root_.io.grpc.ClientInterceptor\n \n+import cats.effect.IO\n+\n trait PetriElement \n \n trait ConcatenableProcess extends PetriElement with Monoid[PetriElement]\n \n@@ -31,9 +43,9 @@\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n       .intercept(KeycloakInterceptor(\"hi\"))\n       .stream[IO]\n-    def run() = ???\n+  def run() = ???\n \n case class PetriElements(l: List[LinkableElement] = List[LinkableElement]()) \n \n type PetriGraph = SortedMap[NodeId, ListSet[LinkableElement]]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629470558047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,10 @@\n trait ConcatenableProcess extends PetriElement with Monoid[PetriElement]\n \n type NodeId = Int\n \n+inl\n+\n enum Arc extends PetriElement : \n   val from: NodeId\n   val to: NodeId\n   case Timed(from: NodeId, to: NodeId, interval: Long) extends Arc\n"
                },
                {
                    "date": 1629470567857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,8 @@\n trait ConcatenableProcess extends PetriElement with Monoid[PetriElement]\n \n type NodeId = Int\n \n-inl\n \n enum Arc extends PetriElement : \n   val from: NodeId\n   val to: NodeId\n"
                },
                {
                    "date": 1629470582913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,16 +24,16 @@\n trait ConcatenableProcess extends PetriElement with Monoid[PetriElement]\n \n type NodeId = Int\n \n-\n enum Arc extends PetriElement : \n   val from: NodeId\n   val to: NodeId\n   case Timed(from: NodeId, to: NodeId, interval: Long) extends Arc\n   case Weighted(from: NodeId, to: NodeId, weight: Int) extends Arc\n \n trait  LinkableElement extends PetriElement: \n+  \n   val id: NodeId\n   val name: String\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n"
                },
                {
                    "date": 1629470594866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,8 @@\n   case Timed(from: NodeId, to: NodeId, interval: Long) extends Arc\n   case Weighted(from: NodeId, to: NodeId, weight: Int) extends Arc\n \n trait  LinkableElement extends PetriElement: \n-  \n   val id: NodeId\n   val name: String\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n"
                },
                {
                    "date": 1629470600359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,9 @@\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n+  \n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n"
                },
                {
                    "date": 1629470605970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n-  \n+  inline def\n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n"
                },
                {
                    "date": 1629470636977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n-  inline def\n+  inline def assert\n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n"
                },
                {
                    "date": 1629470642853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n-  inline def assert\n+  inline def assert[T]\n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n"
                },
                {
                    "date": 1629470658355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n-  inline def assert[T]\n+  inline def assert[T]()\n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n"
                },
                {
                    "date": 1629470663504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n-  inline def assert[T]()\n+  inline def assert[T](con)\n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n"
                },
                {
                    "date": 1629470669075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n-  inline def assert[T](con)\n+  inline def assert[T](condition:Boole)\n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n"
                },
                {
                    "date": 1629470676025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n-  inline def assert[T](condition:Boole)\n+  inline def assert[T](condition:Boolean, )\n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n"
                },
                {
                    "date": 1629470681289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n-  inline def assert[T](condition:Boolean, )\n+  inline def assert[T](condition:Boolean, expr:T)\n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n"
                },
                {
                    "date": 1629470687548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n-  inline def assert[T](condition:Boolean, expr:T)\n+  inline def assert[T](condition:Boolean, expr:T) \n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n"
                },
                {
                    "date": 1629470696225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,10 @@\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n-  inline def assert[T](condition:Boolean, expr:T) \n+  inline def assert[T](condition:Boolean, expr:T) : T = \n+    \n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n"
                },
                {
                    "date": 1629470702880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n   inline def assert[T](condition:Boolean, expr:T) : T = \n-    \n+    if condition\n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n"
                },
                {
                    "date": 1629470708107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n   inline def assert[T](condition:Boolean, expr:T) : T = \n-    if condition\n+    if condition then \n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n"
                },
                {
                    "date": 1629470714299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n   inline def assert[T](condition:Boolean, expr:T) : T = \n-    if condition then \n+    if condition then expr \n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n"
                },
                {
                    "date": 1629470720987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n   inline def assert[T](condition:Boolean, expr:T) : T = \n-    if condition then expr \n+    if condition then expr else ()\n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n"
                },
                {
                    "date": 1629470777934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n       .intercept(KeycloakInterceptor(\"hi\"))\n       .stream[IO]\n-  def run() = ???\n+  def run() = assert\n \n case class PetriElements(l: List[LinkableElement] = List[LinkableElement]()) \n \n type PetriGraph = SortedMap[NodeId, ListSet[LinkableElement]]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629470785696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n       .intercept(KeycloakInterceptor(\"hi\"))\n       .stream[IO]\n-  def run() = assert\n+  def run() = assert()\n \n case class PetriElements(l: List[LinkableElement] = List[LinkableElement]()) \n \n type PetriGraph = SortedMap[NodeId, ListSet[LinkableElement]]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629470794504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n       .intercept(KeycloakInterceptor(\"hi\"))\n       .stream[IO]\n-  def run() = assert()\n+  def run() = assert(true, Println)\n \n case class PetriElements(l: List[LinkableElement] = List[LinkableElement]()) \n \n type PetriGraph = SortedMap[NodeId, ListSet[LinkableElement]]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629471265241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n       .intercept(KeycloakInterceptor(\"hi\"))\n       .stream[IO]\n-  def run() = assert(true, Println)\n+  def run() = assert(true, println)\n \n case class PetriElements(l: List[LinkableElement] = List[LinkableElement]()) \n \n type PetriGraph = SortedMap[NodeId, ListSet[LinkableElement]]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629471273566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n       .intercept(KeycloakInterceptor(\"hi\"))\n       .stream[IO]\n-  def run() = assert(true, println)\n+  def run() = assert(true, println())\n \n case class PetriElements(l: List[LinkableElement] = List[LinkableElement]()) \n \n type PetriGraph = SortedMap[NodeId, ListSet[LinkableElement]]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629471331019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,17 +37,17 @@\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n-  inline def assert[T](condition:Boolean, expr:T) : T = \n+  inline def assert[Unit](condition:Boolean, expr:T) : T = \n     if condition then expr else ()\n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n       .intercept(KeycloakInterceptor(\"hi\"))\n       .stream[IO]\n-  def run() = assert(true, println())\n+  def run() = assert(true, println(\"hello\"))\n \n case class PetriElements(l: List[LinkableElement] = List[LinkableElement]()) \n \n type PetriGraph = SortedMap[NodeId, ListSet[LinkableElement]]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629471338336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n-  inline def assert[Unit](condition:Boolean, expr:T) : T = \n+  inline def assert[Unit](condition:Boolean, expr:Unit) : T = \n     if condition then expr else ()\n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n"
                },
                {
                    "date": 1629471345195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n-  inline def assert[Unit](condition:Boolean, expr:Unit) : T = \n+  inline def assert[Unit](condition:Boolean, expr:Unit) : Unit = \n     if condition then expr else ()\n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n"
                },
                {
                    "date": 1629471373485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n-  inline def assert[Unit](condition:Boolean, expr:Unit) : Unit = \n+  inline def assert[Unit.type](condition:Boolean, expr:Unit) : Unit = \n     if condition then expr else ()\n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n"
                },
                {
                    "date": 1629471380309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n-  inline def assert[Unit.type](condition:Boolean, expr:Unit) : Unit = \n+  inline def assert[Unit](condition:Boolean, expr:Unit) : Unit = \n     if condition then expr else ()\n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n"
                },
                {
                    "date": 1629471389260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n-  inline def assert[Unit](condition:Boolean, expr:Unit) : Unit = \n+  inline def assert[Unit](condition:Boolean, expr:Unit)  = \n     if condition then expr else ()\n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n"
                },
                {
                    "date": 1629471397469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n-  inline def assert[Unit](condition:Boolean, expr:Unit)  = \n+  inline def assert[T](condition:Boolean, expr:Unit)  = \n     if condition then expr else ()\n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n"
                },
                {
                    "date": 1629471525912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,10 +37,9 @@\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n-  inline def assert[T](condition:Boolean, expr:Unit)  = \n-    if condition then expr else ()\n+  \n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n"
                },
                {
                    "date": 1629471540625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,10 @@\n   case Timed(from: NodeId, to: NodeId, interval: Long) extends Arc\n   case Weighted(from: NodeId, to: NodeId, weight: Int) extends Arc\n \n trait  LinkableElement extends PetriElement: \n+  inline def assert[T](condition:Boolean, expr:T)  = \n+    if condition then expr else ()\n   val id: NodeId\n   val name: String\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n"
                },
                {
                    "date": 1629471566994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,9 @@\n   inline def assert[T](condition:Boolean, expr:T)  = \n     if condition then expr else ()\n   val id: NodeId\n   val name: String\n+  def \n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n"
                },
                {
                    "date": 1629471573564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n   inline def assert[T](condition:Boolean, expr:T)  = \n     if condition then expr else ()\n   val id: NodeId\n   val name: String\n-  def \n+  def run()\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n"
                },
                {
                    "date": 1629471596459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n   inline def assert[T](condition:Boolean, expr:T)  = \n     if condition then expr else ()\n   val id: NodeId\n   val name: String\n-  def run()\n+  def run():\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n"
                },
                {
                    "date": 1629471607253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n   inline def assert[T](condition:Boolean, expr:T)  = \n     if condition then expr else ()\n   val id: NodeId\n   val name: String\n-  def run():\n+  def run():()\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n"
                },
                {
                    "date": 1629471612826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n   inline def assert[T](condition:Boolean, expr:T)  = \n     if condition then expr else ()\n   val id: NodeId\n   val name: String\n-  def run():()\n+  def run():\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n"
                },
                {
                    "date": 1629471625839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,11 +35,12 @@\n   inline def assert[T](condition:Boolean, expr:T)  = \n     if condition then expr else ()\n   val id: NodeId\n   val name: String\n-  def run():\n+  def run():Unit\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n+  \n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n   \n   val managedChannelStream: Stream[IO, ManagedChannel] =\n"
                },
                {
                    "date": 1629471639130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n   val name: String\n   def run():Unit\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n-  \n+  def run() = assert(true, println(\"hello\"))\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n   \n   val managedChannelStream: Stream[IO, ManagedChannel] =\n"
                },
                {
                    "date": 1629471645123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n   val name: String\n   def run():Unit\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n-  def run() = assert(true, println(\"hello\"))\n+  def run() = assert(true, println(\"Place\"))\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n   \n   val managedChannelStream: Stream[IO, ManagedChannel] =\n"
                },
                {
                    "date": 1629471661934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n   val id: NodeId\n   val name: String\n   def run():Unit\n \n-case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\n+case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement:\n   def run() = assert(true, println(\"Place\"))\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n   \n"
                },
                {
                    "date": 1629471683442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n       .intercept(KeycloakInterceptor(\"hi\"))\n       .stream[IO]\n-  def run() = assert(true, println(\"hello\"))\n+  def run() = assert(true, println($\"hello\"))\n \n case class PetriElements(l: List[LinkableElement] = List[LinkableElement]()) \n \n type PetriGraph = SortedMap[NodeId, ListSet[LinkableElement]]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629471689144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n       .intercept(KeycloakInterceptor(\"hi\"))\n       .stream[IO]\n-  def run() = assert(true, println($\"hello\"))\n+  def run() = assert(true, println(s\"hello\"))\n \n case class PetriElements(l: List[LinkableElement] = List[LinkableElement]()) \n \n type PetriGraph = SortedMap[NodeId, ListSet[LinkableElement]]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629471696110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n       .intercept(KeycloakInterceptor(\"hi\"))\n       .stream[IO]\n-  def run() = assert(true, println(s\"hello\"))\n+  def run() = assert(true, println(s\"\"$\"\"))\n \n case class PetriElements(l: List[LinkableElement] = List[LinkableElement]()) \n \n type PetriGraph = SortedMap[NodeId, ListSet[LinkableElement]]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629471703032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n       .intercept(KeycloakInterceptor(\"hi\"))\n       .stream[IO]\n-  def run() = assert(true, println(s\"\"$\"\"))\n+  def run() = assert(true, println(s\"$name\"\"))\n \n case class PetriElements(l: List[LinkableElement] = List[LinkableElement]()) \n \n type PetriGraph = SortedMap[NodeId, ListSet[LinkableElement]]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629471726315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n   val name: String\n   def run():Unit\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement:\n-  def run() = assert(true, println(\"Place\"))\n+  def run() = assert(true, println(s\"$name\"))\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n   \n   val managedChannelStream: Stream[IO, ManagedChannel] =\n@@ -48,9 +48,9 @@\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n       .intercept(KeycloakInterceptor(\"hi\"))\n       .stream[IO]\n-  def run() = assert(true, println(s\"$name\"\"))\n+  def run() = assert(true, println(s\"$name\"))\n \n case class PetriElements(l: List[LinkableElement] = List[LinkableElement]()) \n \n type PetriGraph = SortedMap[NodeId, ListSet[LinkableElement]]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629471736738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n   val name: String\n   def run():Unit\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement:\n-  def run() = assert(true, println(s\"$name\"))\n+  def run() = assert(true, println(s\"P$name\"))\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n   \n   val managedChannelStream: Stream[IO, ManagedChannel] =\n"
                },
                {
                    "date": 1629471748086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n   val name: String\n   def run():Unit\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement:\n-  def run() = assert(true, println(s\"P$name\"))\n+  def run() = assert(true, println(s\"Place: $name\"))\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n   \n   val managedChannelStream: Stream[IO, ManagedChannel] =\n@@ -48,9 +48,9 @@\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n       .intercept(KeycloakInterceptor(\"hi\"))\n       .stream[IO]\n-  def run() = assert(true, println(s\"$name\"))\n+  def run() = assert(true, println(s\"Transition: $name\"))\n \n case class PetriElements(l: List[LinkableElement] = List[LinkableElement]()) \n \n type PetriGraph = SortedMap[NodeId, ListSet[LinkableElement]]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1629806024517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n trait ConcatenableProcess extends PetriElement with Monoid[PetriElement]\n \n type NodeId = Int\n \n+\n enum Arc extends PetriElement : \n   val from: NodeId\n   val to: NodeId\n   case Timed(from: NodeId, to: NodeId, interval: Long) extends Arc\n"
                },
                {
                    "date": 1643723508812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,8 @@\n import java.util.concurrent.Executor\n import Constants.*\n \n import scala.concurrent.ExecutionContext.Implicits.global\n-import fs2.grpc.client.ClientOptions\n import _root_.io.grpc.ClientInterceptor\n \n import cats.effect.IO\n \n@@ -24,8 +23,11 @@\n trait ConcatenableProcess extends PetriElement with Monoid[PetriElement]\n \n type NodeId = Int\n \n+case class ArcId(from: Int, to: Int):\n+  import scala.math.Ordered.orderingToOrdered \n+  def compare(that: ArcId): Int = (this.from, this.to) compare (that.from, that.to)\n \n enum Arc extends PetriElement : \n   val from: NodeId\n   val to: NodeId\n"
                },
                {
                    "date": 1643723521226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n import fs2.*\n import _root_.io.grpc.*\n import fs2.grpc.syntax.all.*\n import java.util.concurrent.Executor\n-import Constants.*\n \n import scala.concurrent.ExecutionContext.Implicits.global\n import _root_.io.grpc.ClientInterceptor\n \n"
                },
                {
                    "date": 1643723550744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,15 +44,9 @@\n   def run() = assert(true, println(s\"Place: $name\"))\n \n case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n   \n-  val managedChannelStream: Stream[IO, ManagedChannel] =\n-    ManagedChannelBuilder\n-      .forAddress(\"127.0.0.1\", 9999)\n-      .usePlaintext()\n-      .intercept(KeycloakInterceptor(\"hi\"))\n-      .stream[IO]\n-  def run() = assert(true, println(s\"Transition: $name\"))\n+    def run() = assert(true, println(s\"Transition: $name\"))\n \n case class PetriElements(l: List[LinkableElement] = List[LinkableElement]()) \n \n type PetriGraph = SortedMap[NodeId, ListSet[LinkableElement]]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1643723558391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,11 +42,9 @@\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement:\n   def run() = assert(true, println(s\"Place: $name\"))\n \n-case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n-  \n-    def run() = assert(true, println(s\"Transition: $name\"))\n+case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :  def run() = assert(true, println(s\"Transition: $name\"))\n \n case class PetriElements(l: List[LinkableElement] = List[LinkableElement]()) \n \n type PetriGraph = SortedMap[NodeId, ListSet[LinkableElement]]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1643723737061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,9 @@\n \n import cats.effect.*\n import cats.effect.std.Dispatcher\n import fs2.*\n-import _root_.io.grpc.*\n-import fs2.grpc.syntax.all.*\n+\n import java.util.concurrent.Executor\n \n import scala.concurrent.ExecutionContext.Implicits.global\n import _root_.io.grpc.ClientInterceptor\n@@ -42,9 +41,10 @@\n \n case class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement:\n   def run() = assert(true, println(s\"Place: $name\"))\n \n-case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :  def run() = assert(true, println(s\"Transition: $name\"))\n+case class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n+    def run() = assert(true, println(s\"Transition: $name\"))\n \n case class PetriElements(l: List[LinkableElement] = List[LinkableElement]()) \n \n type PetriGraph = SortedMap[NodeId, ListSet[LinkableElement]]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1643723767059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,8 @@\n \n import java.util.concurrent.Executor\n \n import scala.concurrent.ExecutionContext.Implicits.global\n-import _root_.io.grpc.ClientInterceptor\n \n import cats.effect.IO\n \n trait PetriElement \n"
                },
                {
                    "date": 1643723774394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n \n import cats.kernel.Monoid\n import scala.collection.immutable.SortedMap\n import scala.collection.immutable.ListSet\n-import io.grpc.ManagedChannelBuilder\n \n import cats.effect.*\n import cats.effect.std.Dispatcher\n import fs2.*\n"
                }
            ],
            "date": 1629463928427,
            "name": "Commit-0",
            "content": "package ee.mn8.castanet\n\nsealed trait PetriElement \nsealed trait ConcatenableProcess extends PetriElement with Monoid[PetriElement]\n\ntype NodeId = Int\n\nenum Arc extends PetriElement : \n  val from: NodeId\n  val to: NodeId\n  case Timed(from: NodeId, to: NodeId, interval: Long) extends Arc\n  case Weighted(from: NodeId, to: NodeId, weight: Int) extends Arc\n\ntrait  LinkableElement extends PetriElement: \n  val id: NodeId\n  val name: String\ncase class Place(id: NodeId, name: String, capacity: Int) extends LinkableElement\ncase class Transition(id: NodeId, name: String, service:Service, rpc:RPC) extends LinkableElement :\n    def run() = ???\n\ncase class PetriElements(l: List[LinkableElement] = List[LinkableElement]()) \n\ntype PetriGraph = SortedMap[NodeId, ListSet[LinkableElement]]"
        }
    ]
}