{
    "sourceFile": "modules/core/src/main/scala/ee/mn8/castanet/TransitionSpec.scala",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1630491751080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1630491759665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,10 +124,10 @@\n         .map(t => (t._2, t._1))\n         .mkString(\"\\n\")\n \n     println(serviceClasses)\n- scala.quoted.staging.run(code)\n-//Debug.debugSingle(x)\n+    scala.quoted.staging.run(code)\n+    Debug.debugSingle(x)\n //scala.quoted.staging.run(debugSingle(x))\n     val interfaces =\n       serviceCalls\n         .map(s =>\n"
                },
                {
                    "date": 1630491770061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n \n     println(serviceClasses)\n     scala.quoted.staging.run(code)\n     Debug.debugSingle(x)\n-//scala.quoted.staging.run(debugSingle(x))\n+    scala.quoted.staging.run(debugSingle(x))\n     val interfaces =\n       serviceCalls\n         .map(s =>\n           Class\n"
                },
                {
                    "date": 1630491886659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,8 +127,9 @@\n     println(serviceClasses)\n     scala.quoted.staging.run(code)\n     Debug.debugSingle(x)\n     scala.quoted.staging.run(debugSingle(x))\n+    \n     val interfaces =\n       serviceCalls\n         .map(s =>\n           Class\n"
                },
                {
                    "date": 1630491970523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n     println(serviceClasses)\n     scala.quoted.staging.run(code)\n     Debug.debugSingle(x)\n     scala.quoted.staging.run(debugSingle(x))\n-    \n+    Predef.value\n     val interfaces =\n       serviceCalls\n         .map(s =>\n           Class\n"
                },
                {
                    "date": 1630491976950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n     println(serviceClasses)\n     scala.quoted.staging.run(code)\n     Debug.debugSingle(x)\n     scala.quoted.staging.run(debugSingle(x))\n-    Predef.value\n+    Predef.valueOf[]\n     val interfaces =\n       serviceCalls\n         .map(s =>\n           Class\n"
                },
                {
                    "date": 1630492211340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n     println(serviceClasses)\n     scala.quoted.staging.run(code)\n     Debug.debugSingle(x)\n     scala.quoted.staging.run(debugSingle(x))\n-    Predef.valueOf[]\n+    \n     val interfaces =\n       serviceCalls\n         .map(s =>\n           Class\n"
                },
                {
                    "date": 1630492582321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n         .mkString(\"\\n\")\n \n     println(serviceClasses)\n     scala.quoted.staging.run(code)\n-    Debug.debugSingle(x)\n+    //Debug.debugSingle(x)\n     scala.quoted.staging.run(debugSingle(x))\n     \n     val interfaces =\n       serviceCalls\n"
                },
                {
                    "date": 1630492589848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,11 +124,11 @@\n         .map(t => (t._2, t._1))\n         .mkString(\"\\n\")\n \n     println(serviceClasses)\n-    scala.quoted.staging.run(code)\n+    //scala.quoted.staging.run(code)\n     //Debug.debugSingle(x)\n-    scala.quoted.staging.run(debugSingle(x))\n+    //scala.quoted.staging.run(debugSingle(x))\n     \n     val interfaces =\n       serviceCalls\n         .map(s =>\n"
                }
            ],
            "date": 1630491751080,
            "name": "Commit-0",
            "content": "package ee.mn8.castanet\n\nimport Transito._\nimport cats.effect._\nimport cats.effect.kernel.Resource\nimport scala.io.Source\nimport java.io.File\nimport scala.io.BufferedSource\nimport scala.quoted.*\nimport scala.quoted.staging.{run, withQuotes, Compiler}\nimport java.lang.reflect.Modifier\n\nimport cats.effect.*\nimport cats.effect.std.Dispatcher\nimport fs2.*\nimport _root_.io.grpc.*\nimport fs2.grpc.syntax.all.*\nimport java.util.concurrent.Executor\nimport Constants.*\n\nimport scala.concurrent.ExecutionContext.Implicits.global\nimport fs2.grpc.client.ClientOptions\nimport _root_.io.grpc.ClientInterceptor\n\nobject TransitionSpec extends App:\n  given Compiler = Compiler.make(getClass.getClassLoader)\n  inline def debugSingle(inline expr: Any): Unit =\n    ${ debugSingleImpl('expr) }\n\n  private def debugSingleImpl(expr: Expr[Any])(using Quotes): Expr[Unit] =\n    '{ println(\"Value of \" + ${ Expr(expr.show) } + \" is \" + $expr) }\n\n  private def code(using Quotes) = '{ println(\"foo\") }\n\n  val managedChannelStream: Stream[IO, ManagedChannel] =\n    ManagedChannelBuilder\n      .forAddress(\"127.0.0.1\", 9999)\n      .usePlaintext()\n      .stream[IO]\n\n  val run =\n    val double = (i: Int) => i * 2\n    // test(\"transitions petri net\") {\n    def test =\n      transit1\n      transit2\n      transit3\n      val x = 10\n      val y = 32\n      transition(x + y)\n    test\n\n    val fm = Map((\"test\", double))\n    val z  = fm(\"test\")(2)\n    println(z)\n\n    //val lines = try source.mkString finally source.close()\n\n    /*    def acquireR[F[_]](paths: Seq[String])(using F: Sync[F]): Resource[F, Seq[BufferedSource]] =\n      val blankResource =\n        Resource.make[F, Seq[BufferedSource]](F.delay(Seq.empty[BufferedSource]))(_ => F.unit)\n      (paths.map(pathResource)).foldLeft(blankResource) { case (acc, elem) =>\n        for\n          seq <- acc\n          e   <- elem\n        yield seq :+ e\n      }\n\n    def pathResource[F[_]: Sync](path: String): Resource[F, BufferedSource] =\n      Resource.fromAutoCloseable(Sync[F].delay(Source.fromFile(path))) */\n\n    //def acquire(path: String) = Resource.fromAutoCloseable(IO(Source.fromFile(path)))\n    val filePaths = Seq(\n      \"modules/protocol/src/main/protobuf/castanet.proto\",\n      \"modules/protocol/src/main/protobuf/tic_tac_toe.proto\"\n    )\n    //Services.callsFromPaths(filePaths: Seq[String])\n    def extractServiceDetail(filePaths: String*): Seq[Service] =\n      filePaths.map(s =>\n        Source\n          .fromFile(s)\n          .getLines\n          .collect {\n            case l: String if l.trim.startsWith(\"package\") =>\n              s\"${l.trim.replace(\";\", \"\").split(\" \")(1)}.${s.split(\"/\").last.replace(\".proto\", \"\")}\"\n            case l: String if l.trim.startsWith(\"service\") =>\n              Service(name = l.trim.split(\" \")(1))\n            case l: String if l.trim.startsWith(\"rpc\") =>\n              val parts = l\n                .replaceAll(\"[\\\\(){};]\", \"\")\n                .replace(\"stream\", \"\")\n                .replace(\"rpc\", \"\")\n                .replace(\"returns\", \"\")\n                .trim\n                .split(\"\\\\s+\")\n              RPC(parts.head, parts(1), parts(2))\n          }\n          .foldLeft(Service())((service, l) =>\n            l match {\n              case p: String   => service.copy(packageName = p)\n              case s1: Service => service.copy(name = s1.name)\n              case r: RPC      => service.copy(rpcs = service.rpcs ++ List(r))\n            }\n          )\n      )\n\n    val serviceCalls = extractServiceDetail(\n      \"modules/protocol/src/main/protobuf/castanet.proto\",\n      \"modules/protocol/src/main/protobuf/tic_tac_toe.proto\"\n    )\n    println(serviceCalls)\n    val serviceClasses =\n      serviceCalls\n        .map(s =>\n          Class\n            .forName(s\"${s.packageName}.${s.name}Fs2Grpc\")\n            .getMethods()\n            .collect {\n              case m if Modifier.isPublic(m.getModifiers) => m.getName\n            }\n            .mkString(\", \")\n        )\n        .zip(serviceCalls.map(s => s\"${s.packageName}.${s.name}Fs2Grpc\"))\n        .map(t => (t._2, t._1))\n        .mkString(\"\\n\")\n\n    println(serviceClasses)\n scala.quoted.staging.run(code)\n//Debug.debugSingle(x)\n//scala.quoted.staging.run(debugSingle(x))\n    val interfaces =\n      serviceCalls\n        .map(s =>\n          Class\n            .forName(s\"\"\"${s.packageName}.${s.name}Fs2Grpc$$\"\"\")\n            .getMethods()\n            .collect {\n              case m if Modifier.isPublic(m.getModifiers) && m.getName == \"stub\" =>\n                println(m.getDeclaringClass().getCanonicalName)\n                val obj1 = m.getDeclaringClass()\n                println(s\"${m.getDeclaringClass().getConstructors().mkString(\"\\n\")}\")\n                m.setAccessible(true)\n                /*  m.invoke(\n                  obj1,\n                  Stream.resource(Dispatcher[IO]),\n                  managedChannelStream.head,\n                  ClientOptions.default\n                ) */\n                s\"${m.getDeclaringClass}.${m.getName}\"\n            }\n            .mkString(\",\")\n        )\n        .mkString(\"\\n\")\n    println(interfaces)\n"
        }
    ]
}