{
    "sourceFile": "modules/client/src/main/scala/ee/mn8/castanet/Main.scala",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1629464404694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1629465641136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,28 +12,9 @@\n import fs2.grpc.client.ClientOptions\n import _root_.io.grpc.ClientInterceptor\n \n import cats.effect.IO\n- class JwtCredentials() extends CallCredentials:\n-  import Constants._\n-  override def thisUsesUnstableApi(): Unit = {}\n-  override def applyRequestMetadata(\n-      requestInfo: CallCredentials.RequestInfo,\n-      appExecutor: Executor,\n-      applier: CallCredentials.MetadataApplier\n-  ): Unit =\n-    val headers = new Metadatacase()\n-    headers.put[String](AuthorizationMetadataKey, \"test\")\n-    applier.apply(headers)\n \n-case class KeycloakInterceptor(s: String) extends ClientInterceptor:\n-  override def interceptCall[Req, Res](\n-      methodDescriptor: MethodDescriptor[Req, Res],\n-      callOptions: CallOptions,\n-      channel: Channel\n-  ) =\n-    println(\"hello from the client\")\n-    channel.newCall[Req, Res](methodDescriptor, callOptions.withCallCredentials(JwtCredentials()))\n \n object Main extends IOApp:\n \n   val managedChannelStream: Stream[IO, ManagedChannel] =\n"
                },
                {
                    "date": 1629467472049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,17 +13,16 @@\n import _root_.io.grpc.ClientInterceptor\n \n import cats.effect.IO\n \n-\n object Main extends IOApp:\n \n-  val managedChannelStream: Stream[IO, ManagedChannel] =\n-    ManagedChannelBuilder\n-      .forAddress(\"127.0.0.1\", 9999)\n-      .usePlaintext()\n-      .intercept(KeycloakInterceptor(\"hi\"))\n-      .stream[IO]\n+val managedChannelStream: Stream[IO, ManagedChannel] =\n+  ManagedChannelBuilder\n+    .forAddress(\"127.0.0.1\", 9999)\n+    .usePlaintext()\n+    .intercept(KeycloakInterceptor(\"hi\"))\n+    .stream[IO]\n \n   \n   //def getStub(fqn:String):fs2.grpc.GeneratedCompanion = ???\n   def func1(stub:GreeterFs2Grpc[cats.effect.IO, Metadata],s:String)(f: Function1[String,String]):String = f(s)\n"
                },
                {
                    "date": 1629467602508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,16 +15,18 @@\n import cats.effect.IO\n \n object Main extends IOApp:\n \n-val managedChannelStream: Stream[IO, ManagedChannel] =\n-  ManagedChannelBuilder\n-    .forAddress(\"127.0.0.1\", 9999)\n-    .usePlaintext()\n-    .intercept(KeycloakInterceptor(\"hi\"))\n-    .stream[IO]\n \n   \n+  val managedChannelStream: Stream[IO, ManagedChannel] =\n+    ManagedChannelBuilder\n+      .forAddress(\"127.0.0.1\", 9999)\n+      .usePlaintext()\n+      .intercept(KeycloakInterceptor(\"hi\"))\n+      .stream[IO]\n+\n+  \n   //def getStub(fqn:String):fs2.grpc.GeneratedCompanion = ???\n   def func1(stub:GreeterFs2Grpc[cats.effect.IO, Metadata],s:String)(f: Function1[String,String]):String = f(s)\n   override def run(args: List[String]): IO[ExitCode] = {\n     for {\n"
                },
                {
                    "date": 1629467609436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,15 @@\n import cats.effect.IO\n \n object Main extends IOApp:\n \n+val managedChannelStream: Stream[IO, ManagedChannel] =\n+    ManagedChannelBuilder\n+      .forAddress(\"127.0.0.1\", 9999)\n+      .usePlaintext()\n+      .intercept(KeycloakInterceptor(\"hi\"))\n+      .stream[IO]\n \n-  \n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n"
                },
                {
                    "date": 1629467616613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,15 +15,9 @@\n import cats.effect.IO\n \n object Main extends IOApp:\n \n-val managedChannelStream: Stream[IO, ManagedChannel] =\n-    ManagedChannelBuilder\n-      .forAddress(\"127.0.0.1\", 9999)\n-      .usePlaintext()\n-      .intercept(KeycloakInterceptor(\"hi\"))\n-      .stream[IO]\n-\n+  \n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n"
                },
                {
                    "date": 1629467808963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,30 @@\n import cats.effect.IO\n \n object Main extends IOApp:\n \n-  \n+  case class JwtCredentials() extends CallCredentials:\n+  import Constants._\n+  override def thisUsesUnstableApi(): Unit = {}\n+  override def applyRequestMetadata(\n+      requestInfo: CallCredentials.RequestInfo,\n+      appExecutor: Executor,\n+      applier: CallCredentials.MetadataApplier\n+  ): Unit =\n+    val headers = new Metadata()\n+    headers.put[String](AuthorizationMetadataKey, \"test\")\n+    applier.apply(headers)\n+\n+\n+case class KeycloakInterceptor(s: String) extends ClientInterceptor:\n+  override def interceptCall[Req, Res](\n+      methodDescriptor: MethodDescriptor[Req, Res],\n+      callOptions: CallOptions,\n+      channel: Channel\n+  ) =\n+    println(\"hello from the client\")\n+    channel.newCall[Req, Res](methodDescriptor, callOptions.withCallCredentials(JwtCredentials()))\n+\n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n       .usePlaintext()\n"
                },
                {
                    "date": 1629467819466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,8 @@\n \n object Main extends IOApp:\n \n   case class JwtCredentials() extends CallCredentials:\n-  import Constants._\n   override def thisUsesUnstableApi(): Unit = {}\n   override def applyRequestMetadata(\n       requestInfo: CallCredentials.RequestInfo,\n       appExecutor: Executor,\n"
                },
                {
                    "date": 1629467831460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,17 +16,17 @@\n \n object Main extends IOApp:\n \n   case class JwtCredentials() extends CallCredentials:\n-  override def thisUsesUnstableApi(): Unit = {}\n-  override def applyRequestMetadata(\n-      requestInfo: CallCredentials.RequestInfo,\n-      appExecutor: Executor,\n-      applier: CallCredentials.MetadataApplier\n-  ): Unit =\n-    val headers = new Metadata()\n-    headers.put[String](AuthorizationMetadataKey, \"test\")\n-    applier.apply(headers)\n+    override def thisUsesUnstableApi(): Unit = {}\n+    override def applyRequestMetadata(\n+        requestInfo: CallCredentials.RequestInfo,\n+        appExecutor: Executor,\n+        applier: CallCredentials.MetadataApplier\n+    ): Unit =\n+      val headers = new Metadata()\n+      headers.put[String](AuthorizationMetadataKey, \"test\")\n+      applier.apply(headers)\n \n \n case class KeycloakInterceptor(s: String) extends ClientInterceptor:\n   override def interceptCall[Req, Res](\n"
                },
                {
                    "date": 1629467838559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,16 +27,16 @@\n       headers.put[String](AuthorizationMetadataKey, \"test\")\n       applier.apply(headers)\n \n \n-case class KeycloakInterceptor(s: String) extends ClientInterceptor:\n-  override def interceptCall[Req, Res](\n-      methodDescriptor: MethodDescriptor[Req, Res],\n-      callOptions: CallOptions,\n-      channel: Channel\n-  ) =\n-    println(\"hello from the client\")\n-    channel.newCall[Req, Res](methodDescriptor, callOptions.withCallCredentials(JwtCredentials()))\n+  case class KeycloakInterceptor(s: String) extends ClientInterceptor:\n+    override def interceptCall[Req, Res](\n+        methodDescriptor: MethodDescriptor[Req, Res],\n+        callOptions: CallOptions,\n+        channel: Channel\n+    ) =\n+      println(\"hello from the client\")\n+      channel.newCall[Req, Res](methodDescriptor, callOptions.withCallCredentials(JwtCredentials()))\n \n   val managedChannelStream: Stream[IO, ManagedChannel] =\n     ManagedChannelBuilder\n       .forAddress(\"127.0.0.1\", 9999)\n"
                },
                {
                    "date": 1630926986162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n       .stream[IO]\n \n   \n   //def getStub(fqn:String):fs2.grpc.GeneratedCompanion = ???\n-  def func1(stub:GreeterFs2Grpc[cats.effect.IO, Metadata],s:String)(f: Function1[String,String]):String = f(s)\n+  //def func1(stub:GreeterFs2Grpc[cats.effect.IO, Metadata],s:String)(f: Function1[String,String]):String = f(s)\n   override def run(args: List[String]): IO[ExitCode] = {\n     for {\n       dispatcher     <- Stream.resource(Dispatcher[IO])\n       managedChannel <- managedChannelStream\n"
                },
                {
                    "date": 1634560544792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,4 +62,6 @@\n       )\n \n     } yield ()\n   }.compile.drain.as(ExitCode.Success)\n+\n+  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1634560557007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,5 +63,5 @@\n \n     } yield ()\n   }.compile.drain.as(ExitCode.Success)\n \n-  \n\\ No newline at end of file\n+  case c lass \n\\ No newline at end of file\n"
                },
                {
                    "date": 1634560570189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,5 +63,5 @@\n \n     } yield ()\n   }.compile.drain.as(ExitCode.Success)\n \n-  case c lass \n\\ No newline at end of file\n+  case class Step\n\\ No newline at end of file\n"
                },
                {
                    "date": 1634560596897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,5 +63,5 @@\n \n     } yield ()\n   }.compile.drain.as(ExitCode.Success)\n \n-  case class Step\n\\ No newline at end of file\n+  case class \n\\ No newline at end of file\n"
                },
                {
                    "date": 1634560606214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,5 +63,5 @@\n \n     } yield ()\n   }.compile.drain.as(ExitCode.Success)\n \n-  case class \n\\ No newline at end of file\n+  case class StepTask()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1634564592303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,5 +63,4 @@\n \n     } yield ()\n   }.compile.drain.as(ExitCode.Success)\n \n-  case class StepTask()\n\\ No newline at end of file\n"
                }
            ],
            "date": 1629464404694,
            "name": "Commit-0",
            "content": "package ee.mn8.castanet\n\nimport cats.effect.*\nimport cats.effect.std.Dispatcher\nimport fs2.*\nimport _root_.io.grpc.*\nimport fs2.grpc.syntax.all.*\nimport java.util.concurrent.Executor\nimport Constants.*\n\nimport scala.concurrent.ExecutionContext.Implicits.global\nimport fs2.grpc.client.ClientOptions\nimport _root_.io.grpc.ClientInterceptor\n\nimport cats.effect.IO\n class JwtCredentials() extends CallCredentials:\n  import Constants._\n  override def thisUsesUnstableApi(): Unit = {}\n  override def applyRequestMetadata(\n      requestInfo: CallCredentials.RequestInfo,\n      appExecutor: Executor,\n      applier: CallCredentials.MetadataApplier\n  ): Unit =\n    val headers = new Metadatacase()\n    headers.put[String](AuthorizationMetadataKey, \"test\")\n    applier.apply(headers)\n\ncase class KeycloakInterceptor(s: String) extends ClientInterceptor:\n  override def interceptCall[Req, Res](\n      methodDescriptor: MethodDescriptor[Req, Res],\n      callOptions: CallOptions,\n      channel: Channel\n  ) =\n    println(\"hello from the client\")\n    channel.newCall[Req, Res](methodDescriptor, callOptions.withCallCredentials(JwtCredentials()))\n\nobject Main extends IOApp:\n\n  val managedChannelStream: Stream[IO, ManagedChannel] =\n    ManagedChannelBuilder\n      .forAddress(\"127.0.0.1\", 9999)\n      .usePlaintext()\n      .intercept(KeycloakInterceptor(\"hi\"))\n      .stream[IO]\n\n  \n  //def getStub(fqn:String):fs2.grpc.GeneratedCompanion = ???\n  def func1(stub:GreeterFs2Grpc[cats.effect.IO, Metadata],s:String)(f: Function1[String,String]):String = f(s)\n  override def run(args: List[String]): IO[ExitCode] = {\n    for {\n      dispatcher     <- Stream.resource(Dispatcher[IO])\n      managedChannel <- managedChannelStream\n      helloStub: GreeterFs2Grpc[cats.effect.IO, Metadata] = GreeterFs2Grpc.stub[IO](dispatcher, managedChannel, ClientOptions.default)\n      // _ <- Stream.eval(runProgram(helloStub))\n      _ <- Stream.eval(\n        for {\n          response <- helloStub.sayHello(HelloRequest(\"Ian de Beer\"), new Metadata())\n          message <- IO(response.message)\n          _        <- IO.println(message)\n        } yield ()\n      )\n\n    } yield ()\n  }.compile.drain.as(ExitCode.Success)\n"
        }
    ]
}